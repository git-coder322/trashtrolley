#!/usr/bin/env python

import rospy
from geometry_msgs.msg import Twist

import RPi.GPIO as GPIO

#driver_nodee()


class Motor:
    def __init__(self, pwm_pin, dir_pin):
        self._pwm_pin = pwm_pin
        self._dir_pin = dir_pin
        GPIO.setup(pwm_pin, GPIO.OUT)
        GPIO.setup(dir_pin, GPIO.OUT)
        self._forward_pwm = GPIO.PWM(pwm_pin, _FREQUENCY)
        self._backward_pwm = GPIO.PWM(dir_pin, _FREQUENCY)
    def move(self, speed_percent):
        speed = _clip(abs(speed_percent), 0, 100)

        if speed_percent < 0:
            self._backward_pwm.start(speed)
            self._forward_pwm.start(0)
        else:
            self._forward_pwm.start(speed)
            self._backward_pwm.start(0)

class Driver:
    def __init__(self):
        rospy.init_node('driver')

        self._last_received = rospy.get_time()
        self._timeout = rospy.get_param('~timeout', 2)
        self._rate = rospy.get_param('~rate', 10)
        self._max_speed = rospy.get_param('~max_speed', 0.1)
        self._wheel_base = rospy.get_param('~wheel_base', 0.7112)
        self._obstacle = rospy.get_paran('~obstacle', obstacle_detected)

        self._left_motor = Motor(10, 9)  #BCM pin 24 and 23
        self._right_motor = Motor(8, 7)  #BCM pin 12 and 11
        self._left_speed_percent = 0
        self._right_speed_percent = 0

        # Setup subscriber for velocity twist message
        rospy.Subscriber(
            'cmd_vel', Twist, self.velocity_received_callback)

        rospy.Subscriber('lidar map', costmap, self.static_layer)
        rospy.Subscriber('obstacle', obstacle, self.obstacle_layer)


        # Extract linear and angular velocities from the message
        linear = message.linear.x
        angular = message.angular.z

        # calculates wheel speeds in meters per second based off radially measurements
        left_speed = linear - angular*self._wheel_base/2
        right_speed = linear + angular*self._wheel_base/2

        self._left_speed_percent = (100 * left_speed/self._max_speed)
        self._right_speed_percent = (100 * right_speed/self._max_speed)

    def run(self):
        """The control loop of the driver."""


def main():
        #driver = Driver()
        driver = driver_nodee()
   
        driver.run()

if __name__ == '__main__':
    main()
